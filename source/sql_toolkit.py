from typing import List,Optional

from sqlalchemy.orm import sessionmaker
from pandas import DataFrame

from agno.tools import Toolkit

from sqlalchemy import text, create_engine, Engine, Result

class sql_toolkit(Toolkit):
    """
    A toolkit for interacting with a SQL databases.
    """

    def __init__(self, db_user: str, db_password: str, db_host: str,db_port: str,db_name: str,dtype_dict: dict,table_name: str,data: Optional[DataFrame] = None):
        """
        Initializes the SQLToolkit.

        Parameters:
            db_user (str): Database username.
            db_password (str): Database password.
            db_host (str): Database host.
            db_port (str): Database port.
            db_name (str): Database name.
            table_name (str): Table name in the database.
            dtype_dict (dict): Dictionary mapping column names to SQLAlchemy types.
            data (pd.DataFrame): Data to be used for updating the database.
        """
        super().__init__(name="ski_resort_sql_tools",tools=[self.query_database])
        
        # Set default values for class attributes using environment variables
        self.db_user = db_user
        self.db_password = db_password
        self.db_host = db_host 
        self.db_port = db_port 
        self.db_name = db_name
        self.table_name = table_name
        self.dtype_dict = dtype_dict
        self.data = data

    def get_db_engine(self)-> Engine:
        """Helper method to get a new SQLAlchemy engine."""
        try:
            connection_string = f"postgresql+psycopg2://{self.db_user}:{self.db_password}@{self.db_host}:{self.db_port}/{self.db_name}"
            return create_engine(connection_string)
        except Exception as e:
            print(f"Error creating database engine: {e}")

    def parse_sql_response(self, result: Result) -> List[dict]:
        """
        Helper method to parse the SQL response into a list of dictionaries.
        
        Parameters:
            result (sqlalchemy.engine.Result): The SQL response to parse.
        Returns:
            List[dict]: The parsed SQL response as a list of dictionaries."""
        try:
            rows_as_dicts = []
            for row in result:
                rows_as_dicts.append(row._asdict())
            return rows_as_dicts
        except Exception as e:
            print(f"Error parsing SQL response: {e}")
            return []
    
    
    def query_database(self, query: str) -> List[dict]:
        """
        Execute a SQL query on a database.

        Parameters:
            query (str): The SQL query to execute in the form of a multi-line string. This query is generated by the AI agent.

        Returns:
            List[dict]: The result of the query as a list of dictionaries.
        """
        try:
            engine = self.get_db_engine()

            #creating a sql session with sql engine 
            Session = sessionmaker(bind=engine)
            session = Session()

            #execute query 
            result = session.execute(text(query))

            #write result into a list of dictionaries
            result_as_dict = self.parse_sql_response(result)

            #drop connection to database
            session.close()
            engine.dispose()

            return result_as_dict
    
        except Exception as e:
            print(f"Error executing query: {e}")




