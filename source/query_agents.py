from agno.agent import Agent
from typing import List
from .helper_functions import build_sql_query
import json
from agno.agent import RunResponse


def query_sql_agents(queries:list,
                     input_agent:Agent,
                     output_agent:Agent,
                     max_number_attempts:int=3,
                     print_response:bool = False,
                     print_progess:bool=False) -> list:
    """
    Function to run a list of queries through the sql_input_agent and sql_output_agent.

    Parameters:
        input_agent(Agno.Agent): The agent responsible for processing the input queries.
        output_agent(Agno.Agent): The agent responsible for generating the SQL queries and processing the output.
        max_number_attempts (int): The maximum number of attempts to run the agents. Default is 3.
        print_response (bool): Whether to print the queries and responses. Default is False.
        print_progress (bool): Whether to print the messages outlining the progress of the agents. Default is False.
        
    Returns:
        results(list(dict)): A list of results from the sql_output_agent where each query result is a list element in the form of the
                 sql_output_agent_response dictionary.
    """
    results = []
    for user_query in queries:
        #running the sql_input_agent and sql_output_agent workflow for user query
        if print_progess: print(f"Running query: {user_query}")
        sql_output_agent_response:dict = run_sql_agent_workflow(user_query=user_query,
                               input_agent=input_agent,
                               output_agent=output_agent,
                               print_progess=print_progess)

        # check if the sql_output_agent's response contains an error
        if print_progess: print(f"Checking if sql_output_agent's response contains an error.")
        if sql_output_agent_response['error'] == True:
            sql_output_agent_response:dict = run_new_attempts(user_query=user_query,
                                                         previous_sql_queries=[sql_output_agent_response['sql_query']],
                                                         input_agent=input_agent,
                                                         output_agent=output_agent,
                                                         max_number_attempts=max_number_attempts,
                                                         print_progess=print_progess)
            
        # add output of sql_output_agent to results
        if print_progess: print('Printing response to user query.')
        results.append(sql_output_agent_response)

        #print the results of the most recent query
        if print_response:
            print(f"User Query: {sql_output_agent_response['user_query']}\n")
            print(f"SQL Query: {sql_output_agent_response['sql_query']}\n")
            print(f"Response: {sql_output_agent_response['response_text']}\n")
            print("\n")

    return results

def run_sql_agent_workflow(user_query:str,input_agent:Agent,output_agent:Agent,previous_sql_queries=None,print_progess:bool=False):
    """
    A function to run the sql_input_agent and sql_output_agent workflow.

    Parameters:
        user_query (str): The user's query to be processed by the agents.
        input_agent(Agno.Agent): The agent responsible for processing the input queries.
        output_agent(Agno.Agent): The agent responsible for generating the SQL queries and processing the output.
        previous_sql_output_agent_response (list[str]): A list of previously atempted SQL queries generated by the sql_input_agent.
        print_progess (bool): Whether to print the messages outlining the progress of the agents. Default is False.

    Returns:
        sql_output_agent_response (dict): The response from the sql_output_agent which contains the following keys. 
        - user_query: The user's question you were inputted.
        - sql_query: The SQL query you were inputted.
        - response_text: A human-readable summary of the SQL query results or if there is an error (such as being unable
            to extract all required data), an explanation of the error.
        - error: A boolean indicating if an error occurred during the process.

    """
    # building the sql_input_agent's query - if applicable using the previous sql_output_agent's response
    if print_progess: print(f"Building sql_input_agent's query from user query")
    #sql_input_agent_query is JSON-formatted python string
    # keys: 'user_query' and 'sql_queries'
    sql_input_agent_query:str = build_sql_input_agent_query(user_query=user_query,
                                                        previous_sql_queries=previous_sql_queries)

    # run the sql_input_agent
    if print_progess: print(f"Running sql_input_agent with user query.")
    sql_input_agent_response:RunResponse = input_agent.run(sql_input_agent_query)

    # extracting keywords from the sql_input_agent's response
    if print_progess: print(f"Extracting keywords from sql_input_agent's response.")
    keywords:dict = sql_input_agent_response.content.model_dump()

    # build the sql query for the sql_output_agent
    if print_progess: print(f"Building SQL query from keywords.")
    sql_query:str = user_query + '\n' + build_sql_query(keyword_dict=keywords)

    # run the sql_output_agent
    if print_progess: print(f"Running sql_output_agent with SQL query.")
    sql_output_agent_response = output_agent.run(sql_query)
    
    # converting sql_output_agent's response into a dictionary
    if print_progess: print(f"Extracting SQL data from sql_output_agent's response.")
    sql_output_agent_response:dict = sql_output_agent_response.content.model_dump()

    return sql_output_agent_response

def run_new_attempts(user_query:str,previous_sql_queries:list,input_agent:Agent,output_agent:Agent,max_number_attempts:int=3,print_progess:bool=False):
    """
    Function to run the sql_input_agent and sql_output_agent workflow for a new attempt.This function is used when the sql_output_agent's 
    response contains an error, indicating that the SQL query was not generated correctly. This function uses a while loop to rerun attempts
    until it reaches its maximum number of attempts. This function is called after 1st attempt failed so it starts with the second attempt
    and with the first sql query passed to it as a list. 

    Parameters:
        user_query (str): The user's query to be processed by the agents.
        previous_sql_query (list[str]): A list of previously attempted SQL queries generated by the sql_input_agent.
        input_agent(Agno.Agent): The agent responsible for processing the input queries.
        output_agent(Agno.Agent): The agent responsible for generating the SQL queries and processing the output.
        max_number_attempts (int): The maximum number of attempts to run the agents. Default is 3.
        print_progess (bool): Whether to print the messages outlining the progress of the agents. Default is False. 
    
    Returns:
        sql_output_agent_response (dict): The response from the sql_output_agent which contains the following keys. 
        - user_query: The user's question you were inputted.
        - sql_query: The SQL query you were inputted.
        - response_text: A human-readable summary of the SQL query results or if there is an error (such as being unable
            to extract all required data), an explanation of the error.
        - error: A boolean indicating if an error occurred during the process.
    """
    if print_progess: print(f"Error in sql_output_agent's response. Attempting to generate a new SQL query.")

    #defining srtarting variables for recurssion 
    attempts = 1

    #condition preventing infinite loop 
    while attempts < max_number_attempts:
        sql_output_agent_response = run_sql_agent_workflow(user_query=user_query,
                                                            input_agent=input_agent,
                                                            output_agent=output_agent,
                                                            previous_sql_queries=previous_sql_queries,
                                                            print_progess=print_progess)
        attempts += 1
        # check if the sql_output_agent's response contains an error
        if sql_output_agent_response['error'] == False:
            if print_progess: print(f"SQL query generated successfully after {attempts} attempts.")
            break
        
        # if the sql_output_agent's response contains an error, increment attempts and add the previous sql query to the list
        if print_progess: print(f"new SQL query generation failed. Attempting to generate a new SQL query.")
        previous_sql_queries.append(sql_output_agent_response['sql_query'])

    return sql_output_agent_response

def build_sql_input_agent_query(user_query:str,previous_sql_queries:List[str] = None) -> str:
    """
    Build the input query for the sql_input_agent. This function takes the user query and the previous response from the sql_input_agent 
    (if available) and builds the input query for the sql_input_agent. It returns a string representation of the input query which 
    is a dictionary with the following keys:
    - user_query(str): The original user query.
    - sql_query(str or None): The SQL query generated by the sql_input_agent in its previous attempt, if available.

    Parameters:
        user_query (str): The original user query.
        previous_sql_queries (List[str]): A list of previously attempted SQL queries generated by the sql_input_agent.

    Returns:
        input_query (str): A json-formatted string representing the user query and previous SQL queries.
    """
    # Create the base dictionary for the input agent's query
    input_query_dict = {
        'user_query': user_query,
        'sql_queries': previous_sql_queries if previous_sql_queries is not None else []
    }
    return json.dumps(input_query_dict)